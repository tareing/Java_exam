package day5.DuckDuck;

public class Problem8 {
    public static void main(String[] args) {

        청둥오리 a청둥오리 = new 청둥오리();

        a청둥오리.날다();
        a청둥오리.헤엄치다();
        // 출력 : 오리가 날개로 날아갑니다.
        // 출력 : 오리가 오리발로 헤엄칩니다.

        흰오리 a흰오리 = new 흰오리();
        a흰오리.날다();
        a흰오리.헤엄치다();
        // 출력 : 오리가 날개로 날아갑니다.
        // 출력 : 오리가 오리발로 헤엄칩니다.

        고무오리 a고무오리 = new 고무오리();
        a고무오리.날다();
        a고무오리.헤엄치다();
        // 출력 : 저는 날 수 없어요. ㅜㅠ
        // 출력 : 오리가 둥둥 떠다닙니다.

        고무2오리 a고무2오리 = new 고무2오리();
        a고무2오리.날다();
        a고무2오리.헤엄치다();
        // 출력 : 저는 날 수 없어요. ㅜㅠ
        // 출력 : 오리가 둥둥 떠다닙니다.

        아수라오리 a아수라오리 = new 아수라오리();
        a아수라오리.날다();
        a아수라오리.헤엄치다();
        // 출력 : 오리가 날개로 날아갑니다.
        // 출력 : 오리가 둥둥 떠다닙니다.
    }
}
class 오리 {
    void 날다() {
        System.out.println("오리가 날개로 날아갑니다.");
    }
    void 헤엄치다(){
        System.out.println("오리가 발로 헤엄칩니다");
    }
}

class 흰오리 extends 오리 {

}

class 청둥오리 extends 오리 {

}

class 고무오리 extends 오리 {
    // 메서드 재정의 라고 합니다.
    // 메서드 오버라이드 라고도 합니다.
    // 메서드 재정의 => 부모가 물려준 능력을 다시 구현한다.
    public void 헤엄치다() {
        System.out.println("오리가 둥둥 떠다닙니다");
    }
    void 날다() {
        System.out.println("날 수 없어요");
    }
}

class 고무2오리 extends 고무오리 {

}
// 상속만으로 코드 중복을 완전히 해소할 수 없었다.
// 코드 중복을 해소하기 위해서 상속을 사용하는 건 본질 x
// 상속 : 계층 구조를 표현 가능
class 아수라오리 extends 오리 {
        public void 헤엄치다(){
            System.out.println("오리가 둥둥 떠다닙니다");
        }
}


